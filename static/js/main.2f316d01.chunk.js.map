{"version":3,"sources":["components/Card/Card.jsx","components/card-list/CardList.jsx","components/Search Box/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","align","email","CardList","monsters","map","key","SearchBox","placeholder","handleSearch","type","onChange","App","e","setState","searchField","target","value","state","this","filteredMonsters","filter","eachmonster","toLowerCase","includes","Fragment","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAYeA,G,YATF,SAACC,GAAD,OACT,yBAAKC,UAAY,kBACb,yBAAKC,IAAM,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,6BAC3B,gCAAML,EAAMI,QAAQE,MACpB,uBAAGC,MAAQ,UAAUP,EAAMI,QAAQI,UCSzBC,G,MAXG,SAAAT,GAAK,OAErB,yBAAKC,UAAY,aAEbD,EAAMU,SAASC,KAAI,SAAAP,GAAO,OAAM,kBAAC,EAAD,CAAMQ,IAAOR,EAAQC,GAAID,QAAWA,UCG3DS,G,MATG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACZ,uBAAGR,MAAQ,UAAS,2BACtBS,KAAK,SACLf,UAAY,SACZa,YAAaA,EACbG,SAAUF,OCuCCG,E,YAxCb,aAAe,IAAD,8BACZ,+CAeFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAdtC,EAAKC,MAAQ,CACXd,SAAU,CACR,CAAEJ,KAAM,eAAgBD,GAAI,MAAOG,MAAO,0BAC1C,CAAEF,KAAM,UAAWD,GAAI,KAAMG,MAAO,0BACpC,CAAEF,KAAM,SAAUD,GAAI,KAAMG,MAAO,0BACnC,CAAEF,KAAM,UAAWD,GAAI,IAAKG,MAAO,0BACnC,CAAEF,KAAM,SAAUD,GAAI,KAAMG,MAAO,0BACnC,CAAEF,KAAM,gBAAiBD,GAAI,IAAKG,MAAO,2BAE3Ca,YAAa,IAZH,E,sEAyBJ,IAAD,EAC0BI,KAAKD,MAA/Bd,EADA,EACAA,SAAUW,EADV,EACUA,YACXK,EAAmBhB,EAASiB,QAAQ,SAAAC,GAAW,OAAIA,EAAYtB,KAAKuB,cAAcC,SAAST,EAAYQ,kBAC7G,OACE,kBAAC,IAAME,SAAP,KACE,wBAAIxB,MAAQ,UAAZ,eACA,kBAAC,EAAD,CACAO,YAAc,kBACdC,aAAgBU,KAAKV,eACzB,kBAAC,EAAD,CAAUL,SAAUgB,S,GAnCNM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2f316d01.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nconst Card = (props) => (\r\n    <div className = 'card-container'>\r\n        <img alt = 'monster' src ={`https://robohash.org/${props.monster.id}?set=set2&size=180x180 `}  />\r\n     <h3> {props.monster.name}</h3>\r\n     <p align = 'center'>{props.monster.email}</p>\r\n   </div>\r\n)\r\n\r\n\r\nexport default Card;\r\n","import React  from \"react\";\r\nimport Card from '../Card/Card';\r\nimport \"./CardList.css\";\r\n\r\n\r\n const CardList = props => (\r\n    \r\n  <div className = 'card-list'> \r\n    {\r\n      props.monsters.map(monster => ( <Card key = {monster.id} monster = {monster} />))\r\n  }\r\n    </div> \r\n  \r\n);\r\n\r\n\r\nexport default CardList;","import React from \"react\";\r\nimport \"./searchbox.css\";\r\n\r\nconst SearchBox = ({placeholder, handleSearch}) => (\r\n      <p align = 'center'><input\r\n    type=\"search\"\r\n    className = 'search'\r\n    placeholder={placeholder}\r\n    onChange={handleSearch}\r\n  /></p>\r\n) ;\r\n\r\nexport default SearchBox;","import React from \"react\";\nimport \"./App.css\";\nimport  CardList  from \"./components/card-list/CardList\";\nimport SearchBox from \"./components/Search Box/SearchBox\";\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [\n        { name: \"Frankeistein\", id: \"234\", email: 'monsteremail@email.com' },\n        { name: \"Dracula\", id: \"23\", email: 'monsteremail@email.com' },\n        { name: \"Pompei\", id: \"32\", email: 'monsteremail@email.com' },\n        { name: \"Chockee\", id: \"2\", email: 'monsteremail@email.com' },\n        { name: \"Zombie\", id: \"21\", email: 'monsteremail@email.com' },\n        { name: \"Igbudu Monkey\", id: \"4\", email: 'monsteremail@email.com' }\n      ], \n      searchField: ''\n    };\n  }\n\n  handleSearch = (e) =>{\n    this.setState({searchField : e.target.value})\n  }\n  // componentDidMount() {\n  // fetch(\"https://jsonplaceholder.typicode.com/users\")\n  //   .then(response => response.json())\n  //   .then(formattedData => this.setState({ monsters: formattedData }));\n  // }\n\n  render() {\n    const {monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter( eachmonster => eachmonster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (  \n      <React.Fragment>\n        <h1 align = 'center'>Monster App</h1>\n        <SearchBox\n        placeholder = 'Search Monsters'\n        handleSearch = {this.handleSearch} />\n    <CardList monsters={filteredMonsters} /> \n    </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import AppByMosh from \"./mosh\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// ReactDOM.render(<AppByMosh />, document.getElementById(\"mosh\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}